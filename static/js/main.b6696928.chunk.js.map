{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Container/Container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","updateFilter","itemsReducer","createReducer","actions","state","filter","filterReducer","_","combineReducers","items","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","connect","dispatch","onAdd","value","item","onInputChange","event","target","className","styles","ContactForm","type","onChange","ContactButton","onClick","map","contact","includes","alert","onDelete","handlerDelete","console","log","toLowerCase","placeholder","Container","children","App","Component","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b6696928.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__hdfZR\",\"ContactButton\":\"ContactForm_ContactButton__28Nz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactButton\":\"ContactsList_ContactButton__N8ESB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__2hR5d\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// import { connect } from 'react-redux';\r\n// import actionsTypes from './contacts-types';\r\n\r\nconst addContact = createAction('app/Save_contact', ({ name, number }) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('app/Delete_contact');\r\nconst updateFilter = createAction('app/Update_filter');\r\n\r\nexport default { addContact, deleteContact, updateFilter };\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: actionsTypes.SAVE,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n// export const deleteContact = value => ({\r\n//   type: actionsTypes.DELETE,\r\n//   payload: value,\r\n// });\r\n// export const updateFilter = value => ({\r\n//   type: actionsTypes.UPDATE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n// import actionsTypes from './contacts-types';\r\nimport actions from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.updateFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionsTypes.SAVE:\r\n//       return [...state, payload];\r\n//     case actionsTypes.DELETE:\r\n//       return [...payload];\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionsTypes.UPDATE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n// import { connect } from 'react-redux';\r\n// import { combineReducers } from \"redux\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// };\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'app/Save_contact':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: [...state.contacts.items, payload],\r\n//         },\r\n//       };\r\n\r\n//     case 'app/Update_filter': {\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           filter: payload,\r\n//         },\r\n//       };\r\n//     }\r\n//     case 'app/Delete_contact':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: [...payload],\r\n//         },\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const store = createStore(reducer);\r\n// export default store;\r\n","import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n// import { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ contacts, onAdd }) => {\r\n  let item = { name: '', number: '' };\r\n\r\n  const onInputChange = event => {\r\n    item = { ...item, [event.target.id]: event.target.value };\r\n  };\r\n\r\n  const isAlreadyContact = () => {\r\n    const Names = contacts.map(contact => contact.name);\r\n    return Names.includes(item.name);\r\n  };\r\n\r\n  const onSave = () => {\r\n    isAlreadyContact()\r\n      ? alert(`${item.name} is already in contacts.`)\r\n      : onAdd(item);\r\n  };\r\n\r\n  return (\r\n    <form className={styles.ContactForm}>\r\n      <label>Name</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"name\"></input>\r\n      <label>Number</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"number\"></input>\r\n      <button className={styles.ContactButton} type=\"submit\" onClick={onSave}>\r\n        AddContact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    onAdd: value => dispatch(actions.addContact(value)),\r\n  };\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\nimport styles from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({ filter, contacts, onDelete }) => {\r\n  const onFilterContacts = () => {\r\n    const filterContacts = contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n    return filterContacts;\r\n  };\r\n\r\n  const handlerDelete = event => {\r\n    onDelete(event.target.id);\r\n    console.log(event.target.id);\r\n\r\n    // console.log(event.currentTarget.id);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {(filter ? onFilterContacts() : contacts).map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            id={id}\r\n            className={styles.ContactButton}\r\n            type=\"button\"\r\n            onClick={handlerDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onDelete: value => dispatch(actions.deleteContact(value)),\r\n});\r\n\r\nContactsList.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactsList);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ updateFilter }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        onChange={updateFilter}\r\n        id=\"find\"\r\n        placeholder=\"Enter name for Search\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    updateFilter: event => dispatch(actions.updateFilter(event.target.value)),\r\n  };\r\n};\r\n\r\nFilter.propTypes = {\r\n  updateFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nexport default Container;\r\n","import { Component } from 'react';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactsList from './components/ContactsList/ContactsList';\r\nimport Filter from './components/Filter/Filter';\r\nimport Container from './components/Container/Container';\r\n\r\nexport default class App extends Component {\r\n  // state = {\r\n  //   contacts: [\r\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  //   ],\r\n  //   filter: '',\r\n  // };\r\n\r\n  // handleAddContact = newContact =>\r\n  //   this.setState(({ contacts }) => ({\r\n  //     contacts: [...contacts, newContact],\r\n  //   }));\r\n\r\n  // handleCheckUnique = name => {\r\n  //   const { contacts } = this.state;\r\n  //   const isExistContact = !!contacts.find(contact => contact.name === name);\r\n  //   isExistContact && alert('Conract is already exist');\r\n  //   return !isExistContact;\r\n  // };\r\n\r\n  // handleRemoveContact = id =>\r\n  //   this.setState(({ contacts }) => ({\r\n  //     contacts: contacts.filter(contact => contact.id !== id),\r\n  //   }));\r\n\r\n  // handleFilterChange = filter => this.setState({ filter });\r\n\r\n  // getVisibleContacts = () => {\r\n  //   const { contacts, filter } = this.state;\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  //   );\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   window.addEventListener('keydown', this.handleKeyDown);\r\n  // }\r\n\r\n  // componentWillUnmount() {\r\n  //   window.removeEventListener('keydown', this.handleKeyDown);\r\n  // }\r\n\r\n  // handleKeyDown = event => {\r\n  //   if (event.code === 'Escape') {\r\n  //     this.props.onClose();\r\n  //   }\r\n  // };\r\n\r\n  // handleBackdropClick = event => {\r\n  //   if (event.target === event.currentTarget) {\r\n  //     this.props.onClose();\r\n  //   }\r\n  // };\r\n  render() {\r\n    // const { filter } = this.state;\r\n    // const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <Container>\r\n        <h2>Form Contact</h2>\r\n        <ContactForm\r\n        // onAdd={this.handleAddContact}\r\n        // onCheckUnique={this.handleCheckUnique}\r\n        />\r\n        <h2>Contacts List</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}